//
// Created by ozgur on 9/15/2024.
//

#include "../include/Launcher.h"
#include "../../../3rdParty/imgui/imgui_impl_opengl3.h"
#include "../../../3rdParty/imgui_file_dialog/file_dialog/ImGuiFileDialog.h"
#include "../../../3rdParty/imgui_file_dialog/stb/stb_image.h"
#include <filesystem>

namespace zgr::editor
{
    Launcher::Launcher(int x_res, int y_res, const char* w_name) :
    x_resolution(x_res),
    y_resolution(y_res),
    window_name(w_name),
    isBrowsing(false)
    {
        init();
    }

    Launcher::~Launcher()
    {
        close();
    }

    void Launcher::close()
    {
        ImGui_ImplOpenGL3_Shutdown();
        ImGui_ImplGlfw_Shutdown();
        ImGui::DestroyContext();
        glfwDestroyWindow(window);
        glfwTerminate();
    }

    void Launcher::init()
    {
        if (!glfwInit())
        {
            std::cerr << "ERROR : GLFW LIB could not initialized!!!\n";
            exit(-1);
        }

        window = glfwCreateWindow(x_resolution, y_resolution, window_name, nullptr, nullptr);
        // this operation sets the assigned window as the window where all calls and operations will be performed at that time
        glfwMakeContextCurrent(window);

        ImGui::CreateContext();
        // Connect imgui and glfw
        ImGui_ImplGlfw_InitForOpenGL(window, true);
        // Determien the OpenGLSL version / i.e. GLSL 3.30
        ImGui_ImplOpenGL3_Init("#version 330");

        std::string parentPath = std::filesystem::current_path().parent_path().string();
        strncpy(filePath, parentPath.c_str(), sizeof(filePath) - 1);

        image_ids[project_type::empty]        = load_texture("C:/Users/ozgur/GitHub/zGr/project_images/empty.png");
        image_ids[project_type::first_person] = load_texture("C:/Users/ozgur/GitHub/zGr/project_images/first_person.png");
        image_ids[project_type::third_person] = load_texture("C:/Users/ozgur/GitHub/zGr/project_images/third_person.jpeg");
    }

    void Launcher::render()
    {


        glfwPollEvents();
        // Resets and prepares the OpenGL3 related functions of ImGui.
        // This does all the background preparation necessary for ImGui to be able to draw with OpenGL3.
        ImGui_ImplOpenGL3_NewFrame();
        //  Resets and prepares the GLFW related functions of ImGui.
        //  This allows GLFW to correctly handle user inputs, window events and other related information.
        ImGui_ImplGlfw_NewFrame();
        // Allows ImGui to create a new frame.
        ImGui::NewFrame();

        // Match the imgui and window
        int framebufferWidth, framebufferHeight;
        glfwGetFramebufferSize(window, &framebufferWidth, &framebufferHeight);
        ImGui::SetNextWindowSize(ImVec2(static_cast<float>(framebufferWidth), static_cast<float>(framebufferHeight)));
        ImGui::SetNextWindowPos(ImVec2(0, 0));


        // ImGui::ShowDemoWindow();
        render_launch_default();

        switch (mode)
        {
            case launcher_mode::new_project: render_new_project(); break;
            case launcher_mode::open_project: render_open_project(); break;
        }

        ImGui::SetCursorScreenPos(ImVec2(x_resolution - 150, y_resolution - 75));
        if (ImGui::Button("Exit", ImVec2(100, 30)))
        {
            std::cout << "Launcher Closed...\n";
            exit(-1);
        }

        // Close the window
        ImGui::End();

        ImGui::Render();
        // It draws the GUI data generated by ImGui on the screen using OpenGL.
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
        // Displays the GUI data generated by ImGui on the screen
        glfwSwapBuffers(window);
    }

    bool Launcher::window_should_close()
    {
        return glfwWindowShouldClose(window);
    }


    void Launcher::render_launch_default()
    {
        ImGui::Begin("Launcher Editor");

        ImGui::SetCursorScreenPos(ImVec2((x_resolution / 2) - 75, 20));
        ImGui::Text("Project Launcher");

        ImGui::SetCursorScreenPos(ImVec2(x_resolution / 2 - 225, 50));
        if (ImGui::Button("Open Project", ImVec2(200, 40)))
        {
            mode = launcher_mode::open_project;
        }

        ImGui::SetCursorScreenPos(ImVec2(x_resolution / 2 + 25, 50));
        if (ImGui::Button("New Project", ImVec2(200, 40)))
        {
            mode = launcher_mode::new_project;
        }

        ImGui::Separator();

        ImGui::SetCursorScreenPos(ImVec2(x_resolution - 400, y_resolution - 75));
        if (ImGui::Button("Browse", ImVec2(100, 30)))
        {
            isBrowsing = true;
        }

        if (isBrowsing)
        {
            render_file_browser();
        }
    }

    void Launcher::render_new_project()
    {
        ImGui::SetCursorScreenPos(ImVec2(75, 150));
        ImGui::BeginChild("ProjectTypes", ImVec2(250, 400), true);

        for (int i = 0; i < IM_ARRAYSIZE(project_types); i++)
        {
            if (ImGui::Selectable(project_type_enum_to_string(project_types[i]).c_str(), selected_project_type == i))
            {
                selected_project_type = i;
            }
        }

        ImGui::EndChild();

        ImGui::SameLine();

        ImGui::SetCursorScreenPos(ImVec2(335, 150));
        ImGui::BeginChild("ProjectPreview", ImVec2(400, 400), true);
        ImGui::Image((void*)(intptr_t)image_ids[project_types[selected_project_type]], ImVec2(375, 375));
        ImGui::EndChild();

        ImGui::SetCursorScreenPos(ImVec2(x_resolution - 275, y_resolution - 75));
        if (ImGui::Button("Create", ImVec2(100, 30)))
        {
        }

        ImGui::SetCursorScreenPos(ImVec2(100, y_resolution - 140));
        ImGui::Text("File Name:");
        ImGui::SameLine();
        ImGui::InputText("##FileName", fileName, IM_ARRAYSIZE(fileName), ImGuiInputTextFlags_CharsNoBlank);

        ImGui::SetCursorScreenPos(ImVec2(100, y_resolution - 110));
        ImGui::Text("File Path:");
        ImGui::SameLine();
        ImGui::InputText("##FilePath", filePath, IM_ARRAYSIZE(filePath), ImGuiInputTextFlags_CharsNoBlank);
    }

    void Launcher::render_open_project()
    {
        ImGui::SetCursorScreenPos(ImVec2(75, 150));
        ImGui::BeginChild("Exist Projects", ImVec2(250, 400), true);

        if (existed_projects.empty())
        {
            ImGui::Text("No Exist Project");
        }
        else
        {
            for (int i = 0; i < existed_projects.size(); i++)
            {
                if (ImGui::Selectable(existed_projects[i].c_str(), selected_exist_project == i))
                {
                    selected_exist_project = i;
                }
            }
        }

        ImGui::EndChild();

        ImGui::SetCursorScreenPos(ImVec2(x_resolution - 275, y_resolution - 75));
        if (ImGui::Button("Open", ImVec2(100, 30)))
        {
        }
    }

    void Launcher::render_file_browser()
    {
        IGFD::FileDialogConfig config;
        config.path = std::filesystem::current_path().parent_path().string();

        ImGuiFileDialog::Instance()->OpenDialog("ChooseFileDlgKey", "Choose File", ".cpp,.h,.hpp", config);

        if (ImGuiFileDialog::Instance()->Display("ChooseFileDlgKey"))
        {
            if (ImGuiFileDialog::Instance()->IsOk())
            {
                std::string newFilePath = ImGuiFileDialog::Instance()->GetFilePathName();
                std::string newFileName = std::filesystem::path(newFilePath).filename().string();

                std::cout << newFileName << std::endl;

                strncpy(filePath, newFilePath.c_str(), sizeof(filePath) - 1);
                strncpy(fileName, newFileName.c_str(), sizeof(fileName) - 1);
            }
            ImGuiFileDialog::Instance()->Close();
        }
    }

    GLuint Launcher::load_texture(const std::string& path)
    {
        GLuint texture_id;
        glGenTextures(1, &texture_id);
        glBindTexture(GL_TEXTURE_2D, texture_id);

        int width, height, nrChannels;
        unsigned char* data = stbi_load(path.c_str(), &width, &height, &nrChannels, 0);
        if (data)
        {
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        }

        stbi_image_free(data);
        return texture_id;
    }

    std::string Launcher::project_type_enum_to_string(const project_type &type) const
    {
        switch (type)
        {
            case project_type::empty:         return "Empty Project";
            case project_type::third_person:  return "Third Person Project";
            case project_type::first_person:  return "First Person Project";
            default: return "";
        }
    }
}
